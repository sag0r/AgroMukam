@using Nop.Core
@using Nop.Services.Configuration
@using Nop.Services.Helpers
@using Nop.Services.Media
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using Microsoft.AspNetCore.Html
@using Nop.Web.Framework.Themes

@inject IHelperService helperService
@inject ISettingService settingService
@inject IPictureService pictureService
@inject IStoreContext storeContext
@inject IThemeContext themeContext
@functions {
    public string GetRollOverString(string resourceName)
    {
        return helperService
            .GetRollOverTextForStringResource(resourceName);
    }
}
@{
    var storeId = storeContext.CurrentStore.Id;
    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var isHomePage = controllerName.Equals("home", StringComparison.InvariantCultureIgnoreCase);

    IHtmlContent homePageSlider = null;
    var isHomePageSliderEnabled = string.Empty;

    var menuDropdownLayout = settingService.GetSettingByKey("venturethemesettings.menudropdowncolor", "dark-layout", storeId, true);

    var homePageSliderVideoLink = settingService.GetSettingByKey("venturethemesettings.homepageslidervideolink", string.Empty, storeId, true);
    var homePageSliderVideoCoverPictureId = settingService.GetSettingByKey("venturethemesettings.homepageslidervideocoverpictureid", 0, storeId, true);


    var homePageSliderVideoCover = Url.Content("~/Themes/Venture/Content/img/default-video-cover.jpg");
    var homePageSliderVideoId = string.Empty;
    var homePageSliderVideoStartTime = string.Empty;
    var homePageSliderVideoPlatformUrl = string.Empty;
    var homePageSliderVideoPlatformApiUrl = string.Empty;

    if (isHomePage && !string.IsNullOrEmpty(homePageSliderVideoLink))
    {
        var uri = new Uri(homePageSliderVideoLink);

        if (uri.Host.Contains("youtube"))
        {
            var query = QueryHelpers.ParseQuery(uri.Query);

            StringValues videoStartTime;

            if (query.TryGetValue("t", out videoStartTime))
            {
                homePageSliderVideoStartTime = videoStartTime;
            }

            homePageSliderVideoId = query["v"];
            homePageSliderVideoPlatformUrl = "https://www.youtube.com/embed/";
            homePageSliderVideoPlatformApiUrl = "https://www.youtube.com/iframe_api";
        }
        else if (uri.Host.Contains("vimeo"))
        {
            homePageSliderVideoId = uri.Segments[1];
            homePageSliderVideoPlatformUrl = "https://player.vimeo.com/video/";
            homePageSliderVideoPlatformApiUrl = "https://player.vimeo.com/api/player.js";

            if (!string.IsNullOrEmpty(uri.Fragment))
            {
                homePageSliderVideoStartTime = uri.Fragment.Replace("#t=", "").Replace("s", "");
            }
        }

        if (homePageSliderVideoCoverPictureId > 0)
        {
            var coverPictureUrl = pictureService.GetPictureUrl(homePageSliderVideoCoverPictureId);

            if (!string.IsNullOrEmpty(coverPictureUrl))
            {
                homePageSliderVideoCover = coverPictureUrl;
            }
        }
    }

    if (isHomePage)
    {
        homePageSlider = await Component.InvokeAsync("Widget", new { widgetZone = "home_page_main_slider" });

        if (!String.IsNullOrEmpty(homePageSlider.ToHtmlString()) || !string.IsNullOrEmpty(homePageSliderVideoLink))
        {
            isHomePageSliderEnabled = "slider-enabled";
        }
    }

    var currentThemeName = themeContext.WorkingThemeName;
    var logoPath = "~/Themes/" + currentThemeName + "/Content/img/logo.png";
}
<div class="header">
    @await Component.InvokeAsync("Widget", new { widgetZone = "header" })
    <div class="header-upper">
        <div class="header-selectors-wrapper">
            @*@await Component.InvokeAsync("TaxTypeSelector")*@
            @*@await Component.InvokeAsync("CurrencySelector")*@
            @await Component.InvokeAsync("LanguageSelector")
            @await Html.PartialAsync("_TopLinks")
            @await Component.InvokeAsync("Widget", new { widgetZone = "header_selectors" })
        </div>
    </div>
    <div class="header-lower @isHomePageSliderEnabled">
        <div class="header-left">
            <div class="header-logo">
                <div class="header-logo">
                    @{
                        <img title="" alt="AgroMukam" src="@Url.Content(logoPath)" style="height: 75px;">
                    }
                </div>
            </div>
        </div>
        <div class="header-center">

            <div class="header-menu @menuDropdownLayout" id="mob-menu" style="display: none;">
                <div class="close-menu">
                    <div class="mobile-logo">
                        @*@await Component.InvokeAsync("Logo")*@
                    </div>
                    <span>@T("SevenSpikes.Themes.Common.CloseMenu")</span>
                </div>
                @await Component.InvokeAsync("TopMenu")
                <div class="mobile-menu-items">
                    @await Component.InvokeAsync("HeaderLinks")
                </div>
            </div>

            <div class="wsmenu" id="pc-menu" style="display: none;">

                <ul class="wsmenu-list bg-transparent" style="height: 75px;">
                    <li class="h-100">
                        <a href="#" class="navtext h-100">
                            <span title="@GetRollOverString("MegaMenu.ShopBy")">@T("MegaMenu.ShopBy")</span>
                            <span title="@GetRollOverString("MegaMenu.Category")">@T("MegaMenu.Category")</span>
                        </a>
                        <div class="wsshoptabing wtsdepartmentmenu">
                            <div class="wsshopwp h-100">
                                @await Component.InvokeAsync("TopMenu")
                            </div>
                        </div>
                    </li>
                    @await Html.PartialAsync("_CustomItems.TopMenu")
                </ul>


                <div class="close-menu">
                    <div class="mobile-logo">
                        @*@await Component.InvokeAsync("Logo")*@
                    </div>
                    <span>@T("SevenSpikes.Themes.Common.CloseMenu")</span>
                </div>

            </div>
        </div>
        @{
            var flyoutShoppingCart = await Component.InvokeAsync("FlyoutShoppingCart");
            var headerRightAdditinalClass = string.IsNullOrEmpty(flyoutShoppingCart.ToHtmlString()) ? "shopping-cart-disabled" : "";
        }
        <div class="header-right @headerRightAdditinalClass">
            <div class="search-box store-search-box">
                @*@await Component.InvokeAsync("SearchBox")*@
                <div class="search-opener">@T("search")</div>
            </div>
            @await Component.InvokeAsync("HeaderLinks")
            @flyoutShoppingCart
        </div>
    </div>
</div>
@if (isHomePage && string.IsNullOrEmpty(homePageSliderVideoLink) && homePageSlider != null && !String.IsNullOrEmpty(homePageSlider.ToHtmlString()))
{
    @homePageSlider;
}
else if (isHomePage && !string.IsNullOrEmpty(homePageSliderVideoLink))
{
    <div class="video-slider-wrapper">
        <div id="video-player" class="video-player" data-id="@homePageSliderVideoId" data-platform-url="@homePageSliderVideoPlatformUrl" data-start-time="@homePageSliderVideoStartTime">
            <img src="@homePageSliderVideoCover" alt="Cover photo" />
            <div class="video-overlay"></div>
            <div class="play-button-wrapper">
                <h3 class="video-button-title">@T("SevenSpikes.Themes.Venture.Common.VideoBannerTitle")</h3>
                <h4 class="video-button-subtitle">@T("SevenSpikes.Themes.Venture.Common.VideoBannerSubtitle")</h4>
                <div class="play">@T("SevenSpikes.Themes.Venture.Common.VideoBannerButton")</div>
            </div>
        </div>

        <script src="@homePageSliderVideoPlatformApiUrl"></script>
    </div>
}
@if (isHomePage)
{
    @await Component.InvokeAsync("Widget", new { widgetZone = "venture_theme_ajax_filters_pro" })
}
