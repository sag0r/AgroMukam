@using Nop.Core
@using Nop.Services.Customers
@model CustomerInfoModel
@inject Nop.Core.IWebHelper webHelper
@inject IWorkContext _workContext
@inject ICustomerService _customerService
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-customer-info-page");
}

@section left
{
    @await Component.InvokeAsync("CustomerNavigation", new { selectedTabId = CustomerNavigationEnum.Info })
}

@{
    var isVendor = _customerService.IsVendor(_workContext.CurrentCustomer);
}

<div class="page account-page customer-info-page">
    <div class="page-title">
        <h1>@T("Account.MyAccount") - @T("Account.CustomerInfo") </h1>
    </div>
    <div class="page-body">
        <form asp-route="CustomerInfo" method="post" id="customerInfoForm">
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
            <div class="fieldset">
                <div class="title">
                    <strong>@T("Account.YourPersonalDetails")</strong>
                </div>
                <div class="form-fields">

                    @if (Model.CustomerAttributes.Count > 0)
                    {

                        if (isVendor)
                        {
                            <div class="inputs account-type">
                                <label> Account Type:
                                    <a href="@Url.RouteUrl("CustomerVendorInfo")" class="text-greenishml-2 mr-0">
                                        Vendor

                                        <i class="fas fa-info-circle ml-2 text-muted cursor-pointer"
                                           data-toggle="tooltip"
                                           data-placement="right"
                                           title="You can see your business details including account type on vendor details page"></i>
                                    </a>
                                
                                </label>
                            </div>
                        }
                        else
                        {
                            var actTypeAttr = Model.CustomerAttributes
                            .Where(x => x.FormStepId == 0 && x.FormGroupName == "common")
                            .FirstOrDefault();

                            var actType = actTypeAttr.Values.Where(x => x.IsPreSelected == true).FirstOrDefault();

                            var actTypeVal = actType == null ? "Not Selected" : actType.Name;

                            <div class="inputs account-type">
                                <label> Account Type: <span class="text-greenishml-2 mr-0">@actTypeVal</span> </label>
                            </div>
                        }

                    }

                    <div class="inputs">
                        <label asp-for="FirstName" asp-postfix=":"></label>
                        <input asp-for="FirstName" />
                        <nop-required />
                        <span asp-validation-for="FirstName"></span>
                    </div>
                    <div class="inputs">
                        <label asp-for="LastName" asp-postfix=":"></label>
                        <input asp-for="LastName" />
                        <nop-required />
                        <span asp-validation-for="LastName"></span>
                    </div>
                    @if (Model.GenderEnabled)
                    {
                        <div class="inputs">
                            <label>@T("Account.Fields.Gender"):</label>
                            <div class="gender">
                                <span class="male">
                                    <input type="radio" asp-for="Gender" value="M" checked="@(Model.Gender == "M")" id="gender-male" />
                                    <label class="forcheckbox" for="gender-male">@T("Account.Fields.Gender.Male")</label>
                                </span>
                                <span class="female">
                                    <input type="radio" asp-for="Gender" value="F" checked="@(Model.Gender == "F")" id="gender-female" />
                                    <label class="forcheckbox" for="gender-female">@T("Account.Fields.Gender.Female")</label>
                                </span>
                            </div>
                        </div>
                    }
                    @if (Model.DateOfBirthEnabled)
                    {
                        <div class="inputs date-of-birth">
                            <label>@T("Account.Fields.DateOfBirth"):</label>
                            <nop-date-picker asp-day-name="@Html.NameFor(x => x.DateOfBirthDay)"
                                             asp-month-name="@Html.NameFor(x => x.DateOfBirthMonth)"
                                             asp-year-name="@Html.NameFor(x => x.DateOfBirthYear)"
                                             asp-begin-year="@(DateTime.Now.Year - 110)"
                                             asp-end-year="@(DateTime.Now.Year)"
                                             asp-selected-day="@Model.DateOfBirthDay"
                                             asp-selected-month="@Model.DateOfBirthMonth"
                                             asp-selected-year="@Model.DateOfBirthYear"
                                             asp-localize-labels="true" />
                            @if (Model.DateOfBirthRequired)
                            {
                                <nop-required />
                            }
                            <span asp-validation-for="DateOfBirthDay"></span>
                            <span asp-validation-for="DateOfBirthMonth"></span>
                            <span asp-validation-for="DateOfBirthYear"></span>
                        </div>
                    }
                    <div class="inputs">
                        <label asp-for="Email" asp-postfix=":"></label>
                        <input asp-for="Email" />
                        <nop-required />
                        <span asp-validation-for="Email"></span>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.EmailToRevalidate))
                    {
                        <div class="inputs">
                            <label asp-for="EmailToRevalidate"></label>
                            <span class="email-to-revalidate">@Model.EmailToRevalidate</span>
                            <span class="email-to-revalidate-note">
                                <em>@T("Account.Fields.EmailToRevalidate.Note")</em>
                            </span>
                        </div>
                    }
                    @if (Model.UsernamesEnabled)
                    {
                        <div class="inputs">
                            <label asp-for="Username" asp-postfix=":"></label>
                            <input type="text" value="@Model.Username" disabled />
                            <input asp-for="Username" type="hidden" />
                        </div>
                    }
                </div>
            </div>

            @*@if (Model.PhoneEnabled || Model.FaxEnabled)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.YourContactInformation")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.PhoneEnabled)
                        {
                            <label asp-for="Phone" asp-postfix=":"></label>
                            <div class="input-group inputs mt-2">
                                <div class="input-group-prepend" style="max-width: 90px;">
                                    <select id="phoneAreaCode" name="areaCode"></select>
                                </div>
                                <input class="form-control" asp-for="Phone" disabled />
                                <div class="input-group-append">
                                    <button class="btn bg-greenish text-white" id="changePhoneNumber" type="button">Change</button>
                                    <button class="btn bg-danger text-white" id="cancelhoneNumberEditing" type="button" style="display: none;">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>

                            </div>

                            <div class="phone-verification-error-msg text-danger">
                                <h4></h4>
                            </div>
                        }


                        @if (Model.FaxEnabled)
                        {
                            <div class="inputs">
                                <label asp-for="Fax" asp-postfix=":"></label>
                                <input asp-for="Fax" />
                                @if (Model.FaxRequired)
                                {
                                    <nop-required />
                                }
                                <span asp-validation-for="Fax"></span>
                            </div>
                        }
                    </div>
                </div>
            }*@

        <div class="fieldset">


            @if (!isVendor)
            {

                <input type="hidden" value="161" name="CountryId" id="CountryId" />

                <div class="inputs">
                    <label asp-for="RegionId" asp-postfix=":"></label>
                    <select asp-for="RegionId">
                        <option value="0">--- &nbsp; Select &nbsp; ---</option>
                    </select>
                </div>
                <div class="inputs">
                    <label asp-for="CityId" asp-postfix=":"></label>
                    <select asp-for="CityId">
                        <option value="0">--- &nbsp; Select &nbsp; ---</option>
                    </select>
                </div>
                <div class="inputs">
                    <label asp-for="AreaId" asp-postfix=":"></label>
                    <select asp-for="AreaId">
                        <option value="0">--- &nbsp; Select &nbsp; ---</option>
                    </select>
                </div>
                <div class="inputs">
                    <label asp-for="StreetAddress" asp-postfix=":"></label>
                    <input asp-for="StreetAddress" />
                </div>

                if (Model.CustomerAttributes.Count > 0)
                {
                    @*@await Html.PartialAsync("_CustomerAttributes", Model.CustomerAttributes)*@

                    var actTypeAttr = Model.CustomerAttributes
                        .Where(x => x.FormStepId == 0 && x.FormGroupName == "common")
                        .FirstOrDefault();

                    var actType = actTypeAttr.Values.Where(x => x.IsPreSelected).FirstOrDefault();

                    if (actType != null && actType.Name == "Advisor")
                    {
                        var doctorSpecificAttributes = Model.CustomerAttributes.Where(x => x.FormStepId == 1 && x.FormGroupName == "advisor").ToList();
                        <div class="doctor-account">
                            @await Html.PartialAsync("_CustomerAttributes", doctorSpecificAttributes)
                        </div>
                    }

                }
            }
            else
            {
                <div class="card border-0 rounded-0 shadow-sm">
                    <div class="card-body text-center">
                        <a href="@Url.RouteUrl("CustomerVendorInfo")" class="btn btn-info">
                            Click here to see Business Details
                        </a>
                    </div>
                </div>
            }

        </div>

            @if (Model.NumberOfExternalAuthenticationProviders > 0)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.AssociatedExternalAuth")</strong>
                    </div>
                    @if (Model.AssociatedExternalAuthRecords.Count > 0)
                    {
                        //existing associated external records
                        <div class="table-wrapper">
                            <table class="data-table">
                                <colgroup>
                                    <col />
                                    <col />
                                    <col />
                                </colgroup>
                                <thead>
                                    <tr>
                                        <th class="auth-method-name">
                                            @T("Account.AssociatedExternalAuth.AuthMethodName")
                                        </th>
                                        <th class="email">
                                            @T("Account.AssociatedExternalAuth.Email")
                                        </th>
                                        <th class="external-id">
                                            @T("Account.AssociatedExternalAuth.ExternalIdentifier")
                                        </th>
                                        @if (Model.AllowCustomersToRemoveAssociations)
                                        {
                                            <th class="remove">
                                                @T("Account.AssociatedExternalAuth.Remove")
                                            </th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.AssociatedExternalAuthRecords)
                                    {
                                        <tr>
                                            <td class="auth-method-name">
                                                @item.AuthMethodName
                                            </td>
                                            <td class="email">
                                                @item.Email
                                            </td>
                                            <td class="external-id">
                                                @CommonHelper.EnsureMaximumLength(item.ExternalIdentifier, 40, "...")
                                            </td>
                                            @if (Model.AllowCustomersToRemoveAssociations)
                                            {
                                                <td class="remove">
                                                    <a href="#" onclick="return removeexternalassociation(@item.Id)">@T("Account.AssociatedExternalAuth.Remove")</a>
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    @if (Model.NumberOfExternalAuthenticationProviders > Model.AssociatedExternalAuthRecords.Count)
                    {
                        //we can add more external records
                        var loginUrl = Url.RouteUrl("Login", null, webHelper.CurrentRequestProtocol);
                        <div class="form-fields add-more-external-records">
                            @T("Account.AssociatedExternalAuth.AddMoreRecords")
                            <a href="@loginUrl">@loginUrl</a>
                        </div>
                    }
                </div>
            }
            @if (Model.GdprConsents.Count > 0)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.UserAgreement")</strong>
                    </div>
                    <div class="form-fields">
                        @foreach (var consent in Model.GdprConsents)
                        {
                            if (consent.IsRequired)
                            {
                                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        $('#save-info-button').on('click', function() {
                                            if ($('#consent@(consent.Id)').is(':checked')) {
                                                    //do some stuff
                                                    return true;
                                                } else {
                                                    //just show validation errors, don't post
                                               alert('@Html.Raw(JavaScriptEncoder.Default.Encode(consent.RequiredMessage))');
                                                    return false;
                                                }
                                            });
                                    });
                                </script>
                            }
                            <div class="inputs accept-consent">
                                <input id="consent@(consent.Id)" type="checkbox" name="consent@(consent.Id)" checked="@consent.Accepted" />
                                <label for="consent@(consent.Id)">@consent.Message</label>
                            </div>
                        }
                    </div>
                </div>
            }
            <div class="buttons">
                <input type="submit" id="save-info-button" value="@T("Common.Save")" name="save-info-button" class="button-1 save-customer-info-button" />
            </div>
        </form>
    </div>
</div>

<script asp-location="Footer">

    $(document).ready(async function () {

        const emptyOption = '<option value="0">--- &nbsp; Select &nbsp; ---</option>';

        /*
            Address
         */
        async function fetchAddress(url, selector) {
            return fetch(url)
                .then(resp => resp.json())
                .catch(e => {
                    console.log(`${selector} fetch error`, e);
                });
        }

        function generateAddressOptions(selector, data, selectedVal) {
            var el = $(selector);
            el.html(emptyOption);

            $.each(data,
                function (id, option) {
                    el.append($('<option></option>').val(option.Id)
                        .html(option.Name));
                });

            el.val(selectedVal);
            setTimeout(function () {
                $(selector).trigger('change');
            }, 0);
        }

        var selectedCountry = $('#CountryId').val();
        var url = `@(Url.RouteUrl("GetRegionsByCountryId"))?countryId=${selectedCountry}`;

        var resp = await fetchAddress(url, '#RegionId');
        generateAddressOptions('#RegionId', resp, `@Model.RegionId`);

        $('#RegionId').change(async function () {
            $('#AreaId').html(emptyOption);
            var val = $(this).val();
            var url = `@(Url.RouteUrl("GetCitiesByRegionId"))?regionId=${val}`;
            var resp = await fetchAddress(url, '#CityId');
            generateAddressOptions('#CityId', resp, `@Model.CityId`);
        });

        $('#CityId').change(async function () {
            $('#AreaId').html(emptyOption);
            var val = $(this).val();
            var url = `@(Url.RouteUrl("GetAreasByCityId"))?cityId=${val}`;
            var resp = await fetchAddress(url, '#AreaId');
            generateAddressOptions('#AreaId', resp, `@Model.AreaId`);
        });

    });

    function removeexternalassociation(itemId) {
        if (confirm('@T("Common.AreYouSure")')) {
            var postData = {
                id: itemId
            };
            addAntiForgeryToken(postData);
            $.ajax({
                cache: false,
                type: "POST",
                url: "@Url.Action("RemoveExternalAssociation", "Customer")",
                data: postData,
                dataType: "json",
                success: function (data, textStatus, jqXHR) {
                    location.href = data.redirect;
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert('Failed to delete');
                }
            });
        }
        return false;
    }

    $('[data-toggle="tooltip"]').tooltip();

</script>